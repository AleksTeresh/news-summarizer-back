/*
 * This file is generated by jOOQ.
*/
package fi.redgrenade.summarizer.db.tables;


import fi.redgrenade.summarizer.db.Keys;
import fi.redgrenade.summarizer.db.Public;
import fi.redgrenade.summarizer.db.tables.records.ArticleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Article extends TableImpl<ArticleRecord> {

    private static final long serialVersionUID = -12101557;

    /**
     * The reference instance of <code>public.article</code>
     */
    public static final Article ARTICLE = new Article();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleRecord> getRecordType() {
        return ArticleRecord.class;
    }

    /**
     * The column <code>public.article.id</code>.
     */
    public final TableField<ArticleRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('article_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.article.content</code>.
     */
    public final TableField<ArticleRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.article.header</code>.
     */
    public final TableField<ArticleRecord, String> HEADER = createField("header", org.jooq.impl.SQLDataType.VARCHAR.length(511), this, "");

    /**
     * The column <code>public.article.summary</code>.
     */
    public final TableField<ArticleRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.article.timestamp</code>.
     */
    public final TableField<ArticleRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.article.rowcreatetime</code>.
     */
    public final TableField<ArticleRecord, Timestamp> ROWCREATETIME = createField("rowcreatetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.article.category</code>.
     */
    public final TableField<ArticleRecord, String> CATEGORY = createField("category", org.jooq.impl.SQLDataType.VARCHAR.length(511), this, "");

    /**
     * The column <code>public.article.imageurl</code>.
     */
    public final TableField<ArticleRecord, String> IMAGEURL = createField("imageurl", org.jooq.impl.SQLDataType.VARCHAR.length(511), this, "");

    /**
     * Create a <code>public.article</code> table reference
     */
    public Article() {
        this("article", null);
    }

    /**
     * Create an aliased <code>public.article</code> table reference
     */
    public Article(String alias) {
        this(alias, ARTICLE);
    }

    private Article(String alias, Table<ArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Article(String alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArticleRecord, Long> getIdentity() {
        return Keys.IDENTITY_ARTICLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArticleRecord> getPrimaryKey() {
        return Keys.PK_ARTICLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleRecord>>asList(Keys.PK_ARTICLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Article as(String alias) {
        return new Article(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(String name) {
        return new Article(name, null);
    }
}
