/*
 * This file is generated by jOOQ.
*/
package fi.redgrenade.summarizer.db.tables;


import fi.redgrenade.summarizer.db.Keys;
import fi.redgrenade.summarizer.db.Public;
import fi.redgrenade.summarizer.db.tables.records.ArticleKeyWordRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleKeyWord extends TableImpl<ArticleKeyWordRecord> {

    private static final long serialVersionUID = -2102434089;

    /**
     * The reference instance of <code>public.article_key_word</code>
     */
    public static final ArticleKeyWord ARTICLE_KEY_WORD = new ArticleKeyWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleKeyWordRecord> getRecordType() {
        return ArticleKeyWordRecord.class;
    }

    /**
     * The column <code>public.article_key_word.article_id</code>.
     */
    public final TableField<ArticleKeyWordRecord, Long> ARTICLE_ID = createField("article_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('article_key_word_article_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.article_key_word.key_word_id</code>.
     */
    public final TableField<ArticleKeyWordRecord, Long> KEY_WORD_ID = createField("key_word_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('article_key_word_key_word_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.article_key_word</code> table reference
     */
    public ArticleKeyWord() {
        this("article_key_word", null);
    }

    /**
     * Create an aliased <code>public.article_key_word</code> table reference
     */
    public ArticleKeyWord(String alias) {
        this(alias, ARTICLE_KEY_WORD);
    }

    private ArticleKeyWord(String alias, Table<ArticleKeyWordRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArticleKeyWord(String alias, Table<ArticleKeyWordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArticleKeyWordRecord, Long> getIdentity() {
        return Keys.IDENTITY_ARTICLE_KEY_WORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArticleKeyWordRecord> getPrimaryKey() {
        return Keys.PK_ARTICLE_KEY_WORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArticleKeyWordRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleKeyWordRecord>>asList(Keys.PK_ARTICLE_KEY_WORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArticleKeyWord as(String alias) {
        return new ArticleKeyWord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleKeyWord rename(String name) {
        return new ArticleKeyWord(name, null);
    }
}
